// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
}

model Customer {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  adress    String
  postal    String
  city      String
  createdAt DateTime  @default(now())
  orders    Order[]   @relation("CustomerOrders")
}

model Promotion {
  id        Int       @id @default(autoincrement())
  code      String
  createdAt DateTime  @default(now())
  expireAt  DateTime  @default(now())
}

model Order {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  customerName String
  email        String
  payment      String
  fulfillment  String
  total        Float
  items        OrderItem[]  @relation("OrderItems") // Relation avec OrderItem
  customerId   Int?         
  customer     Customer?    @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade)
}

model Item {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  name      String
  price     Float
  quantity  Int
  orders    OrderItem[]  @relation("OrderItems") // Relation avec OrderItem
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation("OrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  item      Item     @relation("OrderItems", fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  quantity  Int      // Quantité spécifique pour cet item dans cet ordre
}
